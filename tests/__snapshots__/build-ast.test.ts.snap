// Vitest Snapshot v1

exports[`build Metadata AST > snapshots > ranges > should parse a range 1`] = `
Node {
  "body": [
    Node {
      "end": 6,
      "expression": Node {
        "end": 6,
        "expressions": [
          Node {
            "end": 1,
            "raw": "1",
            "start": 0,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 6,
            "left": Node {
              "end": 3,
              "raw": "4",
              "start": 2,
              "type": "Literal",
              "value": 4,
            },
            "operator": "..",
            "right": Node {
              "end": 6,
              "raw": "7",
              "start": 5,
              "type": "Literal",
              "value": 7,
            },
            "start": 2,
            "type": "BinaryExpression",
          },
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > ranges > should parse a range after an identifier 1`] = `
Node {
  "body": [
    Node {
      "end": 11,
      "expression": Node {
        "end": 11,
        "name": "lineNumbers",
        "start": 0,
        "type": "Identifier",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
    Node {
      "end": 18,
      "expression": Node {
        "end": 18,
        "expressions": [
          Node {
            "end": 13,
            "raw": "1",
            "start": 12,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 18,
            "left": Node {
              "end": 15,
              "raw": "4",
              "start": 14,
              "type": "Literal",
              "value": 4,
            },
            "operator": "..",
            "right": Node {
              "end": 18,
              "raw": "7",
              "start": 17,
              "type": "Literal",
              "value": 7,
            },
            "start": 14,
            "type": "BinaryExpression",
          },
        ],
        "start": 12,
        "type": "SequenceExpression",
      },
      "start": 12,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > ranges > should parse a range before an identifier 1`] = `
Node {
  "body": [
    Node {
      "end": 6,
      "expression": Node {
        "end": 6,
        "expressions": [
          Node {
            "end": 1,
            "raw": "1",
            "start": 0,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 6,
            "left": Node {
              "end": 3,
              "raw": "4",
              "start": 2,
              "type": "Literal",
              "value": 4,
            },
            "operator": "..",
            "right": Node {
              "end": 6,
              "raw": "7",
              "start": 5,
              "type": "Literal",
              "value": 7,
            },
            "start": 2,
            "type": "BinaryExpression",
          },
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
    Node {
      "end": 18,
      "expression": Node {
        "end": 18,
        "name": "lineNumbers",
        "start": 7,
        "type": "Identifier",
      },
      "start": 7,
      "type": "ExpressionStatement",
    },
  ],
  "end": 18,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse a RegExp 1`] = `
Node {
  "body": [
    Node {
      "end": 7,
      "expression": Node {
        "end": 7,
        "raw": "/hello/",
        "regex": {
          "flags": "",
          "pattern": "hello",
        },
        "start": 0,
        "type": "Literal",
        "value": /hello/,
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 7,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse a RegExp after another expression 1`] = `
Node {
  "body": [
    Node {
      "end": 11,
      "expression": Node {
        "end": 11,
        "name": "lineNumbers",
        "start": 0,
        "type": "Identifier",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
    Node {
      "end": 19,
      "expression": Node {
        "end": 19,
        "raw": "/hello/",
        "regex": {
          "flags": "",
          "pattern": "hello",
        },
        "start": 12,
        "type": "Literal",
        "value": /hello/,
      },
      "start": 12,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse a RegExp before another expression 1`] = `
Node {
  "body": [
    Node {
      "end": 7,
      "expression": Node {
        "end": 7,
        "raw": "/hello/",
        "regex": {
          "flags": "",
          "pattern": "hello",
        },
        "start": 0,
        "type": "Literal",
        "value": /hello/,
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
    Node {
      "end": 19,
      "expression": Node {
        "end": 19,
        "name": "lineNumbers",
        "start": 8,
        "type": "Identifier",
      },
      "start": 8,
      "type": "ExpressionStatement",
    },
  ],
  "end": 19,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse a directive with arguments 1`] = `
Node {
  "body": [
    Node {
      "end": 17,
      "expression": Node {
        "arguments": [
          Node {
            "end": 14,
            "left": Node {
              "end": 11,
              "raw": "2",
              "start": 10,
              "type": "Literal",
              "value": 2,
            },
            "operator": "..",
            "right": Node {
              "end": 14,
              "raw": "4",
              "start": 13,
              "type": "Literal",
              "value": 4,
            },
            "start": 10,
            "type": "BinaryExpression",
          },
          Node {
            "end": 16,
            "raw": "7",
            "start": 15,
            "type": "Literal",
            "value": 7,
          },
        ],
        "callee": Node {
          "end": 9,
          "name": "highlight",
          "start": 0,
          "type": "Identifier",
        },
        "end": 17,
        "optional": false,
        "start": 0,
        "type": "CallExpression",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 17,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse a directive without arguments 1`] = `
Node {
  "body": [
    Node {
      "end": 11,
      "expression": Node {
        "end": 11,
        "name": "lineNumbers",
        "start": 0,
        "type": "Identifier",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 11,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse a range 1`] = `
Node {
  "body": [
    Node {
      "end": 6,
      "expression": Node {
        "end": 6,
        "expressions": [
          Node {
            "end": 1,
            "raw": "1",
            "start": 0,
            "type": "Literal",
            "value": 1,
          },
          Node {
            "end": 6,
            "left": Node {
              "end": 3,
              "raw": "4",
              "start": 2,
              "type": "Literal",
              "value": 4,
            },
            "operator": "..",
            "right": Node {
              "end": 6,
              "raw": "7",
              "start": 5,
              "type": "Literal",
              "value": 7,
            },
            "start": 2,
            "type": "BinaryExpression",
          },
        ],
        "start": 0,
        "type": "SequenceExpression",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 6,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;

exports[`build Metadata AST > snapshots > should parse an assignment expression 1`] = `
Node {
  "body": [
    Node {
      "end": 42,
      "expression": Node {
        "end": 42,
        "left": Node {
          "end": 5,
          "name": "title",
          "start": 0,
          "type": "Identifier",
        },
        "operator": "=",
        "right": Node {
          "end": 42,
          "raw": "\\"Why everyone should learn Markdown\\"",
          "start": 6,
          "type": "Literal",
          "value": "Why everyone should learn Markdown",
        },
        "start": 0,
        "type": "AssignmentExpression",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 42,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;
